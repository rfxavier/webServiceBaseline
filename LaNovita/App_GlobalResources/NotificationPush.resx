<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="N001" xml:space="preserve">
    <value>Pedido enviado#Seu pedido foi registrado com êxito</value>
  </data>
  <data name="N002" xml:space="preserve">
    <value>Compra de Crédito.#Recibimos su solicitud de crédito, por favor, aguarde el contacto de nuestro equipo Japo</value>
  </data>
  <data name="N003" xml:space="preserve">
    <value>Nuevo Pedido.!#Un cliente ha efectuado un nuevo pedido</value>
  </data>
  <data name="N004" xml:space="preserve">
    <value>Compra de Crédito.#Un cliente ha efectuado una compra de crédito</value>
  </data>
  <data name="N005" xml:space="preserve">
    <value>Preparando Pedido#Su pedido esta siendo preparado para ser enviado</value>
  </data>
  <data name="N006" xml:space="preserve">
    <value>Pedido en Camino#Su pedido ya esta en camino</value>
  </data>
  <data name="N007" xml:space="preserve">
    <value>Pedido Recibido#Su pedido fue entregado satisfactoriamente. Gracias por su confianza.</value>
  </data>
  <data name="N008" xml:space="preserve">
    <value>Pedido con Inconveniente#Su pedido tuvo un inconveniente al intentar realizar la entrega: {StatusPedido}. Por favor entre en contacto</value>
  </data>
  <data name="N009" xml:space="preserve">
    <value>Pedido Cancelado#Su pedido fue cancelado</value>
  </data>
  <data name="N010" xml:space="preserve">
    <value>Status de Crédito#Su crédito fue aplicado satisfactoriamente. Su saldo es de: {SaldoCredito}</value>
  </data>
  <data name="N011" xml:space="preserve">
    <value>Status de Crédito#Su crédito no fue aprobado, por favor, entre en contacto con nuestro Equipo Japo</value>
  </data>
  <data name="N012" xml:space="preserve">
    <value>Status de Crédito#Ha realizado una compra utilizando su Crédito Japo. Saldo actual: {SaldoCredito}</value>
  </data>
  <data name="N013" xml:space="preserve">
    <value>Promoción#Tenemos una promoción para usted, por favor, ingrese a la App Japo</value>
  </data>
  <data name="N014" xml:space="preserve">
    <value>Pedido Asignado#Se le ha sido asignado un pedido para realizar la entrega</value>
  </data>
  <data name="N015" xml:space="preserve">
    <value>{TypeTitle} de Jornada#{SellerName} ha {Type} la jornada.</value>
  </data>
  <data name="N016" xml:space="preserve">
    <value>Pedido En Proceso#El Pedido para su cliente: {CustomerName} generado el: {DateOrder} fue Asignado al repartidor: {DealerName}.</value>
    <comment>Push que recibe el vendedor cuando su pedido es asignado a un repartidor.</comment>
  </data>
  <data name="N017" xml:space="preserve">
    <value>Nueva Oportunidad#{DealerName} ha registrado para usted una nueva oportunidad. Cliente Prospecto: {CustomerName} </value>
    <comment>Cuando el repartidor registra una nueva oportunidad para un vendedor a este ultimo le llega una notificacion push.</comment>
  </data>
  <data name="N018" xml:space="preserve">
    <value>Pedido En Camino#El pedido para su cliente {CustomerName} generado el: {DateOrder} ya esta en camino.</value>
    <comment>Notificacion push que recibe el vendedor cuando el repartidor marca como en camino un pedido</comment>
  </data>
  <data name="N019" xml:space="preserve">
    <value>Pedido con Inconveniente#El Pedido para su cliente: {CustomerName} generado el: {DateOrder} tuvo un inconveniente al intentar realizar la entrega: {StatusPedido}</value>
    <comment>El vendedor recibe un push informando que su pedido tuvo algun inconveniente al intentar realizar la entrega.</comment>
  </data>
  <data name="N020" xml:space="preserve">
    <value>Pedido Entregado#El Pedido para su cliente: {CustomerName} generado el: {DateOrder} fue entregado satisfactoriamente.</value>
    <comment>El vendedor recibe un push informando que ya se entrego su pedido.</comment>
  </data>
</root>